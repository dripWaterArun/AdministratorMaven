<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds" debug="false">
    <!--读取配置文件-->
    <!--<properties resource="config.properties"/>-->

    <!-- 全局变量 start -->
    <!-- 读取 application 配置文件中的项目名称 -->
    <springProperty scope="context" name="logName" source="spring.application.name" defaultValue="localhost.log"/>
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="./system_logs/${logName}"/>
    <!-- 日志保留天数 -->
    <property name="LOG_SAVE_DAYS" value="30"/>
    <!--编码方式-->
    <property name="charsetEncoding" value="UTF-8"/>
    <!--定义日志文件的存储地址： 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="./system_logs/${logName}"/>
    <!--定义文件输出格式：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
    <property name="pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"/>
    <!-- 全局变量 end -->

    <!-- 控制台输出 日志 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${pattern}</pattern>
            <charset>${charsetEncoding}</charset>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="dayLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/logs/${file.separator}%d{yyyy-MM-dd}/${logName}.log.%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>${LOG_SAVE_DAYS}</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${pattern}</pattern>
            <charset>${charsetEncoding}</charset>
        </encoder>
    </appender>

    <!-- INFO 输出到文件 -->
    <appender name="infoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志写入的文件名, 可以是相对目录, 也可以是绝对目录, 如果上级目录不存在会自动创建 -->
        <file>${LOG_HOME}/logs/${logName}-INFO.log</file>
        <!-- 如果是 true, 日志被追加到文件结尾; 如果是 false, 清空现存文件. 默认是 true -->
        <append>true</append>
        <encoder>
            <!-- 定义日志输出格式 -->
            <pattern>${pattern}</pattern>
            <!-- 日志输出编码 -->
            <charset>${charsetEncoding}</charset>
        </encoder>
        <!-- 最常用的滚动策略, 它根据时间来制定滚动策略, 既负责滚动也负责触发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 设置滚动文件规则, 如果直接使用 %d, 默认格式是 yyyy-MM-dd -->
            <fileNamePattern>
                ${LOG_HOME}/logs/${file.separator}%d{yyyy-MM-dd}/${logName}-INFO-%d{yyyy-MM-dd}.%i.log.zip
            </fileNamePattern>
            <!-- 日志保留天数 -->
            <maxHistory>${LOG_SAVE_DAYS}</maxHistory>
            <maxFileSize>100MB</maxFileSize>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 设置日志输出级别 -->
            <level>INFO</level>
        </filter>
    </appender>

    <!-- WARN 输出到文件 -->
    <appender name="warnLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志写入的文件名, 可以是相对目录, 也可以是绝对目录, 如果上级目录不存在会自动创建 -->
        <file>${LOG_HOME}/logs/${logName}-WARN.log</file>
        <!-- 如果是 true, 日志被追加到文件结尾; 如果是 false, 清空现存文件. 默认是 true -->
        <append>true</append>
        <encoder>
            <!-- 定义日志输出格式 -->
            <pattern>${pattern}</pattern>
            <!-- 日志输出编码 -->
            <charset>${charsetEncoding}</charset>
        </encoder>
        <!-- 最常用的滚动策略, 它根据时间来制定滚动策略, 既负责滚动也负责触发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>
                ${LOG_HOME}/logs/${file.separator}%d{yyyy-MM-dd}/${logName}-WARN-%d{yyyy-MM-dd}.%i.log.zip
            </fileNamePattern>
            <!-- 日志保留天数 -->
            <maxHistory>${LOG_SAVE_DAYS}</maxHistory>
            <maxFileSize>30MB</maxFileSize>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 设置日志输出级别 -->
            <level>WARN</level>
        </filter>
    </appender>

    <!-- ERROR 输出到文件 -->
    <appender name="errorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志写入的文件名, 可以是相对目录, 也可以是绝对目录, 如果上级目录不存在会自动创建 -->
        <file>${LOG_HOME}/logs/${logName}-ERROR.log</file>
        <!-- 如果是 true, 日志被追加到文件结尾; 如果是 false, 清空现存文件. 默认是 true -->
        <append>true</append>
        <encoder>
            <!-- 定义日志输出格式 -->
            <pattern>${pattern}</pattern>
            <!-- 日志输出编码 -->
            <charset>${charsetEncoding}</charset>
        </encoder>
        <!-- 最常用的滚动策略, 它根据时间来制定滚动策略, 既负责滚动也负责触发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>
                ${LOG_HOME}/logs/${file.separator}%d{yyyy-MM-dd}/${logName}-ERROR-%d{yyyy-MM-dd}.%i.log.zip
            </fileNamePattern>
            <!-- 日志保留天数 -->
            <maxHistory>${LOG_SAVE_DAYS}</maxHistory>
            <maxFileSize>30MB</maxFileSize>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- 设置日志输出级别 -->
            <level>ERROR</level>
        </filter>
    </appender>

    <!--myibatis log configure-->
    <logger name="com.apache.ibatis" level="TRACE"/>
    <logger name="java.sql.Connection" level="DEBUG"/>
    <logger name="java.sql.Statement" level="DEBUG"/>
    <logger name="java.sql.PreparedStatement" level="DEBUG"/>

    <!-- 指定 com.imooc.log.stack 下的日志打印级别, appender -->
    <!-- 上线之前修改成 info, 否则线上会打印切面日志 -->
    <!--<logger name="com.imooc.log.stack" level="info" additivity="false">-->
    <logger name="com.imooc.log.stack" level="debug" additivity="false">
        <appender-ref ref="console"/>
        <appender-ref ref="infoLog"/>
        <appender-ref ref="errorLog"/>
    </logger>

    <logger name="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" level="debug"
            additivity="false">
        <appender-ref ref="console"/>
    </logger>

    <logger name="org.springframework.orm.jpa.JpaTransactionManager" level="debug"
            additivity="false">
        <appender-ref ref="console"/>
    </logger>

    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="trace"
            additivity="false">
        <appender-ref ref="console"/>
    </logger>

    <!-- 配置日志输出的级别 -->
    <root level="INFO">
        <appender-ref ref="dayLog"/>
        <appender-ref ref="console"/>
        <appender-ref ref="infoLog"/>
        <appender-ref ref="warnLog"/>
        <appender-ref ref="errorLog"/>
    </root>

</configuration>
